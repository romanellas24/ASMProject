ACTORS: 
    cl: client (acmeat)
    gw: gateway
    api: api microservice
    ws: websocket microservice

/* CHOREOGRAPHIES */

C_submission =
    create: cl -> gw ;
    submit: gw -> api ;
    notify_new_request: api -> ws

C_accepted = 
    send_result_accepted: api -> cl | 
    update_dashboard_cook: api -> ws

C_rejected = send_result_rejected: api -> cl
C_timedout = send_result_timedout: api -> cl

C_delete =
    delete_req: cl -> gw ;
    submit_delete: gw -> api ;
    notify_delete: api -> ws

C_prepare = notify_prepare_cook: api -> ws ;

C_rest =
    C_submission ;
    (
        (
            C_accepted ;
            (
                C_delete +
                C_prepare
            )
        ) +
        C_rejected + 
        C_timedout
    ) ;
    1




/* PROJECTIONS */

proj(C_rest, cl) =
    create@gw ;
    (
        (
            send_result_accepted(api) ;
            (
                delete_req@gw +
                1
            )
        ) +
        send_result_rejected(api) + 
        send_result_timedout(api)
    ) ;
    1


proj(C_rest, gw) =
    (create(cl) ; submit@api) ;
    (
        (
            (delete_req(cl) ; submit_delete@api) +
            1
        ) +
        1 + 
        1
    ) ;
    1


proj(C_rest, api) =
    (submit(gw) ; notify_new_request@ws) ;
    (
        (
            (send_result_accepted@cl | update_dashboard_cook@ws) ;
            (
                (submit_delete(gw) ; notify_delete@ws) +
                notify_prepare_cook@ws
            )
        ) +
        (send_result_rejected@cl) + 
        (send_result_timedout@cl)
    ) ;
    1

proj(C_rest, ws) =
    notify_new_request(api) ;
    (
        (
            update_dashboard_cook(api) ;
            (
                notify_delete(api) +
                notify_prepare_cook(api)
            )
        ) +
        1 + 
        1
    ) ;
    1